package loyalty;

import jif.principals.L;

public class Shop extends AbstractPrincipal {

	public Shop(String{this} name) {
		super(name, L);
	}

	Timestamp           { {U -> ; * <- } meet {S -> ; S <- } }
		transaction_ok  { {U -> ; * <- } meet {S -> ; S <- } } (
			User        { {U -> ; U <- } meet {S -> } } U,
			Transaction { {U -> ; U <- } meet {S -> } } tx,
			Shop        { {U -> ; U <- } meet {S -> } } S
		)
	where authority(this), S equiv this {
		return new Timestamp();
	}

	boolean             { {U -> } meet {S -> ; S <- } }
		redeem_tx_ok    { S -> } (
			User        { {U -> ; U <- } meet {S -> } } U  ,
			Transaction { {U -> ; U <- } meet {S -> } } tx ,
			Shop        { {U -> ; U <- } meet {S -> } } S  ,
			Coupon      { {U -> ; U <- } meet {S -> } } C  )
	where authority(this), S equiv this {
		return true;
	}

	boolean { {U -> } meet {S -> ; S <- } } redeem {U <- } (
		User         { {U -> ; U <-  } meet {S -> } } U  ,
		Transaction  { {U -> ; U <-  } meet {S -> } } tx ,
		Shop         { {U -> ; U <-  } meet {S -> } } S  ,
		Coupon       { {U -> ; U <-  } meet {S -> } } C  )
	where authority(this), caller(U), this equiv S, L actsfor U, L actsfor S {
		boolean result = declassify(TTP.validateCoupon(U, C), { U -> meet S -> });
		if (result)
			return redeem_tx_ok(U, tx, S, C);
		else
			return false;
	}

	void purchase       { {U -> ; * <- } meet {S -> ; S <- } } (
			User        { {U -> ; U <- } meet {S -> } } U  ,
			Transaction { {U -> ; U <- } meet {S -> } } tx ,
			Shop        { {U -> ; U <- } meet {S -> } } S  )
	where authority(this), S equiv this, L actsfor U, L actsfor S, caller(L) {
		final Timestamp    t  = transaction_ok(U, tx, S);
		final Timestamp   _t  = endorse(t , { {U -> ; U <- } meet {S -> ; S <- } } );
		final User        _U  = endorse(U , { {U -> ; U <- } meet {S -> ; S <- } } );
		final Transaction _tx = endorse(tx, { {U -> ; U <- } meet {S -> ; S <- } } );
		final Shop        _S  = endorse(S , { {U -> ; U <- } meet {S -> ; S <- } } );
	}

}

