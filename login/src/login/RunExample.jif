
import java.io.PrintStream;

public class RunExample[principal t3p] authority (t3p) {

	final UserPrincipal{t3p <- } root;
	final UserPrincipal{t3p <- }[]{t3p <- } users;

	public RunExample() {
		root = new UserPrincipal("Root", UserGroup, "username:b", "password:b");

		users = new UserPrincipal[]{
			new UserPrincipal("a", UserGroup, "username:a", "password:a"),
			new UserPrincipal("b", UserGroup, "username:b", "password:b"),
			new UserPrincipal("c", UserGroup, "username:c", "password:c"),
			new UserPrincipal("d", UserGroup, "username:d", "password:d"),
			new UserPrincipal("e", UserGroup, "username:e", "password:e")
		};
	}

	public void run{t3p <- } (PrintStream[{}]{t3p <- } out) : {t3p <- }
		throws IllegalArgumentException
		where authority (t3p)
	{

		final UserPrincipal{t3p <- }[]{t3p <- } users = this.users;
		final UserPrincipal root = this.root;

		if (users == null || root == null || out == null)
			return;

		for (int i = 0; i < users.length; ++i) {
			final UserPrincipal user = users[i];
			if (user == null)
				continue;
			if (t3p actsfor user && t3p actsfor root) {
				String username = user.getUsername(t3p);
				String password = user.getPassword(t3p);
				String rootUsername = root.getUsername(t3p);
				String rootPassword = root.getPassword(t3p);
				String result = "";

				if (username != null && password != null && username.equals(rootUsername) && password.equals(rootPassword)) {
					result = PrincipalUtil.toString(user) + " tries to login, success!";
				}
				else {
					result = PrincipalUtil.toString(user) + " tries to login, incorrect username or password.";
				}

				out.println(declassify(result, {t3p -> ; t3p <- } to {t3p <- }));
			}
		}
	}
}

