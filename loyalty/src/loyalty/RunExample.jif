
import jif.util.LinkedList;

public class RunExample authority(TrustedThirdParty, UserGroup, ShopGroup) {

	LinkedList[{TrustedThirdParty -> ; TrustedThirdParty <- }]{TrustedThirdParty -> ; TrustedThirdParty <- } list;

	public void add{_shop <- } (
		TimeStamp  {_shop -> _user; _shop <- } _t,
		User       {_shop -> _user; _shop <- } _user,
		Transaction{_shop -> _user; _shop <- } _tx,
		Shop       {_shop -> _user; _shop <- } _shop)
	where authority(TrustedThirdParty), caller(_shop)
	{
		final Principal user = endorse(declassify(_user, {TrustedThirdParty -> user}), {TrustedThirdParty -> user; TrustedThirdParty <- });
		final Principal shop = endorse(declassify(_shop, {TrustedThirdParty -> user}), {TrustedThirdParty -> user; TrustedThirdParty <- });
		Transaction     tx   = endorse(declassify(_tx  , {TrustedThirdParty -> user}), {TrustedThirdParty -> user; TrustedThirdParty <- });
		TimeStamp       t    = endorse(declassify(_t   , {TrustedThirdParty -> user}), {TrustedThirdParty -> user; TrustedThirdParty <- });

		endorse({TrustedThirdParty -> user; TrustedThirdParty <- }) {
			LogEntry[{TrustedThirdParty -> user; TrustedThirdParty <- }] newLogEntry = new LogEntry(user, shop, tx, t);
			LinkedList list = this.list;
			if (list != null)
				list.add(newLogEntry);
		}
	}

	public boolean{user -> ; TrustedThirdParty <- } validateCoupon{user <- ; user ->}
		(User{user -> ; user <- } user, Coupon{user <- ; user -> } _c)
	where
		authority(TrustedThirdParty),
		caller(user),
		endorse({TrustedThirdParty <- ; user -> })
	{
//		TODO: is the endorsement and declassify necessary ? Is is not natural ?
		final Coupon{TrustedThirdParty <- ; user -> } c = endorse(_c, {TrustedThirdParty <- ; user -> }); 
		LinkedList{TrustedThirdParty <- ; user -> } list = declassify(this.list, {TrustedThirdParty <- ; user -> });

		if (list == null || c == null)
			return false;

		return declassify(list.indexOf(c.logEntry) != -1, {user -> ; TrustedThirdParty <-});
	}
}

