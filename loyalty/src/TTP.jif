package loyalty;

public class TTP extends AbstractPrincipal {

	public TTP() {
		super("TTP");
	}

	public boolean      { {U -> ; * <- *} meet {this -> ; this <- } }
		validateCoupon  {  U <- ; * -> *}
		(	User        {  U <- ; U ->  } U ,
			Coupon      {  U <- ; U ->  } C )
	where authority (this) {
		return true;
	}

	boolean { {U -> } meet {S -> ; S <- } }
		redeem {U <- }
			(
			User         { {U -> ; U <-  } meet {S -> ; * <- } } U  ,
			Transaction  { {U -> ; U <-  } meet {S -> ; * <- } } tx ,
			Shop         { {U -> ; U <-  } meet {S -> ; * <- } } S  ,
			Coupon       { {U -> ; U <-  } meet {S -> ; * <- } } C  )
	where caller(U & S) {
		if (S == null)
			return false;
		boolean result = declassify(validateCoupon(U, C), { U -> meet S -> });
		if (result) {
			return S.redeem_tx_ok(U, tx, S, C);
		}
		else {
			return false;
		}
	}
}


